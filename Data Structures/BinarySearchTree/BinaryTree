import java.util.*;

class TreeNode{
    public int data;
    public TreeNode leftChild;
    public TreeNode rightChild;
    
    public TreeNode(int data){
        this.data=data;
    }
    
    public void insert(int value){
        if(data==value){
            return;
        }else{
            if(value<data){
                if(leftChild==null){
                    leftChild=new TreeNode(value);
                }else{
                    leftChild.insert(value);
                }
            }
            else{
                if(rightChild==null){
                    rightChild=new TreeNode(value);
                }else{
                    rightChild.insert(value);
                }
            }
        }
    }
    
    public void traverse(){
        if(leftChild!=null){
            leftChild.traverse();
        }
        System.out.println(data+" ");
        if(rightChild!=null){
            rightChild.traverse();
        }
    }
    
    public int get(int value){
        if(data==value){
            return data;
        }
        
        if(value<data){
            return leftChild.get(value);
        }else if(value>data){
            return rightChild.get(value);
        }
        return 0;
    }
    
    public int min(){
        if(leftChild==null){
            return data;
        }else{
            return leftChild.min();
        }
    }
    
    public int height(TreeNode root){
        int lh=0,rh=0;
        
        if(root.leftChild!=null){
            lh=height(root.leftChild);
        }
        
        if(root.rightChild!=null){
            rh=height(root.rightChild);
        }
        
        if(lh>rh){
            return (1+lh);
        }else{
            return (1+rh);
        }
        
    }
    
}

class BinarySearchTree{
    public TreeNode root;
    
    public void insert(int value){
        if(root==null){
            root=new TreeNode(value);
        }else{
            root.insert(value);
        }
    }
    
    public void traverse(){
        if(root!=null){
            root.traverse();
        }
    }
    
    public int get(int value){
        if(root==null){
            return Integer.MIN_VALUE;
        }else{
            return root.get(value);
        }
    }
    
    public int min(){
        if(root==null){
             return Integer.MIN_VALUE;
        }else{
            return root.min();
        }
    }
    
    public int height(){
        if(root==null){
            return 0;
        }else{
            return root.height(root);
        }
    }
    
}

public class Main
{
	public static void main(String[] args) {
		BinarySearchTree tree=new BinarySearchTree();
		
		tree.insert(1);
		tree.insert(2);
		tree.insert(3);
		tree.insert(4);
		tree.insert(5);
		
		tree.traverse();
		System.out.println("treeGet : "+tree.get(2));
		System.out.println("treeMin : "+tree.min());
		System.out.println("treeHeigth : "+tree.height());
	}
}
